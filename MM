Write a program to Implement multithreading for Matrix Operations using Pthreads (any one operation).

import threading

# Function to perform multiplication for a single element of the result matrix
def multiply_element(A, B, C, i, j, n):
    """
    Compute C[i][j] = sum(A[i][k] * B[k][j] for k in range(n))
    where A and B are input matrices, C is the result matrix.
    """
    sum_result = 0
    for k in range(n):
        sum_result += A[i][k] * B[k][j]
    C[i][j] = sum_result

def matrix_multiplication(A, B, n):
    # Initialize the result matrix with zeros
    C = [[0] * n for _ in range(n)]
    
    # List of threads
    threads = []
    
    # Create threads to compute each element of the result matrix
    for i in range(n):
        for j in range(n):
            thread = threading.Thread(target=multiply_element, args=(A, B, C, i, j, n))
            threads.append(thread)
            thread.start()  # Start the thread
    
    # Wait for all threads to finish
    for thread in threads:
        thread.join()
    
    return C

def input_matrix(n):
    """Input a matrix of size n x n."""
    matrix = []
    print(f"Enter the elements of the {n}x{n} matrix row by row:")
    for i in range(n):
        row = list(map(int, input(f"Row {i+1}: ").split()))
        matrix.append(row)
    return matrix

def display_matrix(matrix):
    """Display the matrix."""
    for row in matrix:
        print(" ".join(map(str, row)))

def main():
    # Input size of the matrix
    n = int(input("Enter the size of the square matrices (n x n): "))
    
    # Input matrices A and B
    print("Enter matrix A:")
    A = input_matrix(n)
    print("Enter matrix B:")
    B = input_matrix(n)
    
    # Perform matrix multiplication using multithreading
    result = matrix_multiplication(A, B, n)
    
    # Display the result
    print("\nResulting Matrix C (A * B):")
    display_matrix(result)

if __name__ == "__main__":
    main()
