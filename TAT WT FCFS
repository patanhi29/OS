Write a program to compute the Turnaround Time (TAT) and Waiting Time (WT) using the First Come
and First Serve (FCFS) Scheduling. (enter suitable number of processes, CPU burst, and Arrival Time)

# Function to calculate Turnaround Time and Waiting Time
def fcfs_scheduling(processes, arrival_time, burst_time):
    n = len(processes)
    
    # Initialize arrays for completion time, turnaround time, and waiting time
    completion_time = [0] * n
    turnaround_time = [0] * n
    waiting_time = [0] * n

    # Calculate completion time
    for i in range(n):
        if i == 0:
            completion_time[i] = arrival_time[i] + burst_time[i]
        else:
            completion_time[i] = max(completion_time[i - 1], arrival_time[i]) + burst_time[i]

    # Calculate turnaround time and waiting time
    for i in range(n):
        turnaround_time[i] = completion_time[i] - arrival_time[i]
        waiting_time[i] = turnaround_time[i] - burst_time[i]

    return completion_time, turnaround_time, waiting_time


# Input the number of processes
n = int(input("Enter the number of processes: "))

# Input process IDs
processes = [f"P{i+1}" for i in range(n)]

# Input arrival times
arrival_time = list(map(int, input("Enter the arrival times (space-separated): ").split()))

# Input burst times
burst_time = list(map(int, input("Enter the burst times (space-separated): ").split()))

# Perform FCFS scheduling
completion_time, turnaround_time, waiting_time = fcfs_scheduling(processes, arrival_time, burst_time)

# Display the results
print("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time")
for i in range(n):
    print(f"{processes[i]}\t{arrival_time[i]}\t\t{burst_time[i]}\t\t{completion_time[i]}\t\t{turnaround_time[i]}\t\t{waiting_time[i]}")

# Calculate average TAT and WT
avg_tat = sum(turnaround_time) / n
avg_wt = sum(waiting_time) / n
print(f"\nAverage Turnaround Time: {avg_tat:.2f}")
print(f"Average Waiting Time: {avg_wt:.2f}")
